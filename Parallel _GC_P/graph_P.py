import csv
import matplotlib.pyplot as plt
file_P = open('result_P.csv')
csvreader_P = csv.reader(file_P)
header_P = []
header_P = next(csvreader_P)
rows_P = []
for row_P in csvreader_P:
    if len(row_P)>0:
        rows_P.append(row_P)
XMX_P=[]
Throughput_P=[]
Latency_P=[]
Application_runtime_P=[]
FULL_GC_P=[]
GC_P=[]
RandomForest_P=[]
KNeighbors_P=[]
DecisionTree_P=[]
MLP_P=[]
Ensemble_P=[]
for i_P in range(0,len(rows_P)):
    if int(rows_P[i_P][0])%200==0 or int(rows_P[i_P][0])==2:
        XMX_P.append(rows_P[i_P][0])
        Throughput_P.append(float(rows_P[i_P][1]))
        Latency_P.append(float(rows_P[i_P][2]))
        Application_runtime_P.append(float(rows_P[i_P][3]))
        FULL_GC_P.append(float(rows_P[i_P][4]))
        GC_P.append(float(rows_P[i_P][5]))
        RandomForest_P.append(float(rows_P[i_P][6]))
        KNeighbors_P.append(float(rows_P[i_P][7]))
        DecisionTree_P.append(float(rows_P[i_P][8]))
        MLP_P.append(float(rows_P[i_P][9]))
        Ensemble_P.append(float(rows_P[i_P][10]))
plt.xticks(rotation=90)
        # (x axis, y axis, labels)
plt.plot(XMX_P, RandomForest_P, label=header_P[6])
plt.plot(XMX_P, KNeighbors_P, label=header_P[7])
plt.plot(XMX_P, DecisionTree_P, label=header_P[8])
plt.plot(XMX_P, MLP_P, label=header_P[9])
plt.plot(XMX_P, Ensemble_P, label=header_P[10])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithms')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, RandomForest_P, label=header_P[6])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithm')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, KNeighbors_P, label=header_P[7])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithm')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, DecisionTree_P, label=header_P[8])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithm')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, MLP_P, label=header_P[9])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithm')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, Ensemble_P, label=header_P[10])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Accuracy(0%-100%)')
plt.title('Classifier Algorithm')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, Latency_P, label=header_P[2])
plt.plot(XMX_P, Application_runtime_P, label=header_P[3])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Time(s)')
plt.title('Application Runtime/Latency Graph')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, Application_runtime_P, label=header_P[3])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Time(s)')
plt.title('Application Runtime Graph')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, Throughput_P, label=header_P[1])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Throughput(0%-100%)')
plt.title('Performance Graph')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, Latency_P, label=header_P[2])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('Time(s)')
plt.title('Performance Graph')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, FULL_GC_P, label=header_P[4])
plt.plot(XMX_P, GC_P, label=header_P[5])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('GC/FULL-GC Count')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, GC_P, label=header_P[5])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('GC Count')
plt.legend()
plt.show()
plt.xticks(rotation=90)
plt.plot(XMX_P, FULL_GC_P, label=header_P[4])
plt.xlabel('Xmx (ParallelGC)')
plt.ylabel('FULL-GC Count')
plt.legend()
plt.show()